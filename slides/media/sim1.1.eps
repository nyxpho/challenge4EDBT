%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 392 240
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, September 4, 2015 10:26:04 AM CEST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
392 240 setpagesize
0 0 0 0 setmargins
0 0 setorigin
392 240 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
392.000 0.00000 l
392.000 240.000 l
0.00000 240.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
392.000 0.00000 l
392.000 240.000 l
0.00000 240.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 392 240 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -199.000 -221.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
199.000 221.000 m
591.000 221.000 l
591.000 461.000 l
199.000 461.000 l
199.000 221.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -199.000 -221.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -199.000 -221.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -199.000 -221.000 ] defaultmatrix matrix concatmatrix setmatrix
.200000 .400000 1.00000 RG
newpath
299.000 251.000 m
299.000 259.284 292.284 266.000 284.000 266.000  c
275.716 266.000 269.000 259.284 269.000 251.000  c
269.000 242.716 275.716 236.000 284.000 236.000  c
292.284 236.000 299.000 242.716 299.000 251.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
280.615 251.857 m
279.751 251.857 279.149 251.956 278.811 252.154  c
278.472 252.352 278.303 252.691 278.303 253.170  c
278.303 253.555 278.430 253.860 278.686 254.084  c
278.941 254.308 279.282 254.420 279.709 254.420  c
280.313 254.420 280.795 254.209 281.154 253.787  c
281.514 253.365 281.693 252.800 281.693 252.092  c
281.693 251.857 l
280.615 251.857 l
h
282.771 251.404 m
282.771 255.154 l
281.693 255.154 l
281.693 254.154 l
281.443 254.550 281.136 254.844 280.771 255.037  c
280.407 255.230 279.959 255.326 279.428 255.326  c
278.751 255.326 278.214 255.136 277.818 254.756  c
277.423 254.376 277.225 253.873 277.225 253.248  c
277.225 252.508 277.472 251.951 277.967 251.576  c
278.462 251.201 279.199 251.014 280.178 251.014  c
281.693 251.014 l
281.693 250.904 l
281.693 250.404 281.529 250.019 281.201 249.748  c
280.873 249.477 280.417 249.342 279.834 249.342  c
279.459 249.342 279.092 249.389 278.732 249.482  c
278.373 249.576 278.032 249.712 277.709 249.889  c
277.709 248.889 l
278.105 248.732 278.488 248.618 278.857 248.545  c
279.227 248.472 279.589 248.436 279.943 248.436  c
280.891 248.436 281.600 248.680 282.068 249.170  c
282.537 249.660 282.771 250.404 282.771 251.404  c
h
285.344 254.154 m
287.281 254.154 l
287.281 247.482 l
285.172 247.904 l
285.172 246.826 l
287.266 246.404 l
288.453 246.404 l
288.453 254.154 l
290.391 254.154 l
290.391 255.154 l
285.344 255.154 l
285.344 254.154 l
h
f
2 J
10.0000 M
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
299.000 251.000 m
299.000 259.284 292.284 266.000 284.000 266.000  c
275.716 266.000 269.000 259.284 269.000 251.000  c
269.000 242.716 275.716 236.000 284.000 236.000  c
292.284 236.000 299.000 242.716 299.000 251.000  c
h
S
2 J
10.0000 M
.200000 .400000 1.00000 RG
newpath
546.000 252.000 m
546.000 260.284 539.284 267.000 531.000 267.000  c
522.716 267.000 516.000 260.284 516.000 252.000  c
516.000 243.716 522.716 237.000 531.000 237.000  c
539.284 237.000 546.000 243.716 546.000 252.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
527.615 252.857 m
526.751 252.857 526.149 252.956 525.811 253.154  c
525.472 253.352 525.303 253.691 525.303 254.170  c
525.303 254.555 525.430 254.860 525.686 255.084  c
525.941 255.308 526.282 255.420 526.709 255.420  c
527.313 255.420 527.795 255.209 528.154 254.787  c
528.514 254.365 528.693 253.800 528.693 253.092  c
528.693 252.857 l
527.615 252.857 l
h
529.771 252.404 m
529.771 256.154 l
528.693 256.154 l
528.693 255.154 l
528.443 255.550 528.136 255.844 527.771 256.037  c
527.407 256.230 526.959 256.326 526.428 256.326  c
525.751 256.326 525.214 256.136 524.818 255.756  c
524.423 255.376 524.225 254.873 524.225 254.248  c
524.225 253.508 524.472 252.951 524.967 252.576  c
525.462 252.201 526.199 252.014 527.178 252.014  c
528.693 252.014 l
528.693 251.904 l
528.693 251.404 528.529 251.019 528.201 250.748  c
527.873 250.477 527.417 250.342 526.834 250.342  c
526.459 250.342 526.092 250.389 525.732 250.482  c
525.373 250.576 525.032 250.712 524.709 250.889  c
524.709 249.889 l
525.105 249.732 525.488 249.618 525.857 249.545  c
526.227 249.472 526.589 249.436 526.943 249.436  c
527.891 249.436 528.600 249.680 529.068 250.170  c
529.537 250.660 529.771 251.404 529.771 252.404  c
h
533.156 255.154 m
537.297 255.154 l
537.297 256.154 l
531.734 256.154 l
531.734 255.154 l
532.182 254.696 532.794 254.074 533.570 253.287  c
534.346 252.501 534.833 251.993 535.031 251.764  c
535.417 251.347 535.685 250.990 535.836 250.693  c
535.987 250.396 536.062 250.107 536.062 249.826  c
536.062 249.357 535.898 248.977 535.570 248.686  c
535.242 248.394 534.818 248.248 534.297 248.248  c
533.922 248.248 533.529 248.311 533.117 248.436  c
532.706 248.561 532.266 248.758 531.797 249.029  c
531.797 247.826 l
532.276 247.639 532.721 247.495 533.133 247.396  c
533.544 247.298 533.922 247.248 534.266 247.248  c
535.172 247.248 535.896 247.475 536.438 247.928  c
536.979 248.381 537.250 248.988 537.250 249.748  c
537.250 250.102 537.182 250.441 537.047 250.764  c
536.911 251.087 536.667 251.467 536.312 251.904  c
536.208 252.019 535.896 252.347 535.375 252.889  c
534.854 253.430 534.115 254.186 533.156 255.154  c
h
f
2 J
10.0000 M
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
546.000 252.000 m
546.000 260.284 539.284 267.000 531.000 267.000  c
522.716 267.000 516.000 260.284 516.000 252.000  c
516.000 243.716 522.716 237.000 531.000 237.000  c
539.284 237.000 546.000 243.716 546.000 252.000  c
h
S
2 J
10.0000 M
.200000 .400000 1.00000 RG
newpath
244.000 347.000 m
244.000 355.284 237.284 362.000 229.000 362.000  c
220.716 362.000 214.000 355.284 214.000 347.000  c
214.000 338.716 220.716 332.000 229.000 332.000  c
237.284 332.000 244.000 338.716 244.000 347.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
227.743 344.842 m
227.743 345.857 l
227.431 345.680 227.123 345.550 226.821 345.467  c
226.519 345.383 226.212 345.342 225.899 345.342  c
225.191 345.342 224.644 345.563 224.259 346.006  c
223.873 346.449 223.681 347.071 223.681 347.873  c
223.681 348.675 223.873 349.298 224.259 349.740  c
224.644 350.183 225.191 350.404 225.899 350.404  c
226.212 350.404 226.519 350.363 226.821 350.279  c
227.123 350.196 227.431 350.071 227.743 349.904  c
227.743 350.904 l
227.441 351.040 227.129 351.144 226.806 351.217  c
226.483 351.290 226.139 351.326 225.774 351.326  c
224.785 351.326 223.998 351.016 223.415 350.396  c
222.832 349.777 222.540 348.936 222.540 347.873  c
222.540 346.811 222.834 345.972 223.423 345.357  c
224.011 344.743 224.821 344.436 225.853 344.436  c
226.175 344.436 226.496 344.469 226.813 344.537  c
227.131 344.605 227.441 344.706 227.743 344.842  c
h
229.966 350.154 m
231.903 350.154 l
231.903 343.482 l
229.794 343.904 l
229.794 342.826 l
231.888 342.404 l
233.075 342.404 l
233.075 350.154 l
235.013 350.154 l
235.013 351.154 l
229.966 351.154 l
229.966 350.154 l
h
f
2 J
10.0000 M
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
244.000 347.000 m
244.000 355.284 237.284 362.000 229.000 362.000  c
220.716 362.000 214.000 355.284 214.000 347.000  c
214.000 338.716 220.716 332.000 229.000 332.000  c
237.284 332.000 244.000 338.716 244.000 347.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
1.00000 1.00000 1.00000 RG
newpath
335.000 348.000 m
335.000 356.284 328.284 363.000 320.000 363.000  c
311.716 363.000 305.000 356.284 305.000 348.000  c
305.000 339.716 311.716 333.000 320.000 333.000  c
328.284 333.000 335.000 339.716 335.000 348.000  c
h
S
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
.200000 .400000 1.00000 RG
newpath
488.000 348.000 m
488.000 356.284 481.284 363.000 473.000 363.000  c
464.716 363.000 458.000 356.284 458.000 348.000  c
458.000 339.716 464.716 333.000 473.000 333.000  c
481.284 333.000 488.000 339.716 488.000 348.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
471.743 345.842 m
471.743 346.857 l
471.431 346.680 471.123 346.550 470.821 346.467  c
470.519 346.383 470.212 346.342 469.899 346.342  c
469.191 346.342 468.644 346.563 468.259 347.006  c
467.873 347.449 467.681 348.071 467.681 348.873  c
467.681 349.675 467.873 350.298 468.259 350.740  c
468.644 351.183 469.191 351.404 469.899 351.404  c
470.212 351.404 470.519 351.363 470.821 351.279  c
471.123 351.196 471.431 351.071 471.743 350.904  c
471.743 351.904 l
471.441 352.040 471.129 352.144 470.806 352.217  c
470.483 352.290 470.139 352.326 469.774 352.326  c
468.785 352.326 467.998 352.016 467.415 351.396  c
466.832 350.777 466.540 349.936 466.540 348.873  c
466.540 347.811 466.834 346.972 467.423 346.357  c
468.011 345.743 468.821 345.436 469.853 345.436  c
470.175 345.436 470.496 345.469 470.813 345.537  c
471.131 345.605 471.441 345.706 471.743 345.842  c
h
474.778 351.154 m
478.919 351.154 l
478.919 352.154 l
473.356 352.154 l
473.356 351.154 l
473.804 350.696 474.416 350.074 475.192 349.287  c
475.968 348.501 476.455 347.993 476.653 347.764  c
477.039 347.347 477.307 346.990 477.458 346.693  c
477.609 346.396 477.685 346.107 477.685 345.826  c
477.685 345.357 477.521 344.977 477.192 344.686  c
476.864 344.394 476.440 344.248 475.919 344.248  c
475.544 344.248 475.151 344.311 474.739 344.436  c
474.328 344.561 473.888 344.758 473.419 345.029  c
473.419 343.826 l
473.898 343.639 474.343 343.495 474.755 343.396  c
475.166 343.298 475.544 343.248 475.888 343.248  c
476.794 343.248 477.518 343.475 478.060 343.928  c
478.601 344.381 478.872 344.988 478.872 345.748  c
478.872 346.102 478.804 346.441 478.669 346.764  c
478.534 347.087 478.289 347.467 477.935 347.904  c
477.830 348.019 477.518 348.347 476.997 348.889  c
476.476 349.430 475.737 350.186 474.778 351.154  c
h
f
2 J
10.0000 M
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
488.000 348.000 m
488.000 356.284 481.284 363.000 473.000 363.000  c
464.716 363.000 458.000 356.284 458.000 348.000  c
458.000 339.716 464.716 333.000 473.000 333.000  c
481.284 333.000 488.000 339.716 488.000 348.000  c
h
S
2 J
10.0000 M
.200000 .400000 1.00000 RG
newpath
576.000 349.000 m
576.000 357.284 569.284 364.000 561.000 364.000  c
552.716 364.000 546.000 357.284 546.000 349.000  c
546.000 340.716 552.716 334.000 561.000 334.000  c
569.284 334.000 576.000 340.716 576.000 349.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
559.743 346.842 m
559.743 347.857 l
559.431 347.680 559.123 347.550 558.821 347.467  c
558.519 347.383 558.212 347.342 557.899 347.342  c
557.191 347.342 556.644 347.563 556.259 348.006  c
555.873 348.449 555.681 349.071 555.681 349.873  c
555.681 350.675 555.873 351.298 556.259 351.740  c
556.644 352.183 557.191 352.404 557.899 352.404  c
558.212 352.404 558.519 352.363 558.821 352.279  c
559.123 352.196 559.431 352.071 559.743 351.904  c
559.743 352.904 l
559.441 353.040 559.129 353.144 558.806 353.217  c
558.483 353.290 558.139 353.326 557.774 353.326  c
556.785 353.326 555.998 353.016 555.415 352.396  c
554.832 351.777 554.540 350.936 554.540 349.873  c
554.540 348.811 554.834 347.972 555.423 347.357  c
556.011 346.743 556.821 346.436 557.853 346.436  c
558.175 346.436 558.496 346.469 558.813 346.537  c
559.131 346.605 559.441 346.706 559.743 346.842  c
h
565.356 348.436 m
565.919 348.561 566.359 348.813 566.677 349.193  c
566.994 349.574 567.153 350.045 567.153 350.607  c
567.153 351.472 566.856 352.141 566.263 352.615  c
565.669 353.089 564.825 353.326 563.731 353.326  c
563.367 353.326 562.989 353.290 562.599 353.217  c
562.208 353.144 561.810 353.035 561.403 352.889  c
561.403 351.748 l
561.726 351.936 562.083 352.079 562.474 352.178  c
562.864 352.277 563.273 352.326 563.700 352.326  c
564.440 352.326 565.005 352.180 565.396 351.889  c
565.786 351.597 565.981 351.170 565.981 350.607  c
565.981 350.097 565.799 349.696 565.435 349.404  c
565.070 349.113 564.570 348.967 563.935 348.967  c
562.903 348.967 l
562.903 347.998 l
563.981 347.998 l
564.554 347.998 564.997 347.881 565.310 347.646  c
565.622 347.412 565.778 347.076 565.778 346.639  c
565.778 346.191 565.619 345.847 565.302 345.607  c
564.984 345.368 564.528 345.248 563.935 345.248  c
563.601 345.248 563.250 345.282 562.880 345.350  c
562.510 345.417 562.101 345.524 561.653 345.670  c
561.653 344.623 l
562.112 344.498 562.536 344.404 562.927 344.342  c
563.317 344.279 563.685 344.248 564.028 344.248  c
564.935 344.248 565.648 344.451 566.169 344.857  c
566.690 345.264 566.950 345.816 566.950 346.514  c
566.950 347.003 566.812 347.415 566.536 347.748  c
566.260 348.081 565.867 348.311 565.356 348.436  c
h
f
2 J
10.0000 M
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
576.000 349.000 m
576.000 357.284 569.284 364.000 561.000 364.000  c
552.716 364.000 546.000 357.284 546.000 349.000  c
546.000 340.716 552.716 334.000 561.000 334.000  c
569.284 334.000 576.000 340.716 576.000 349.000  c
h
S
2 J
10.0000 M
.200000 .400000 1.00000 RG
newpath
446.000 431.000 m
446.000 439.284 439.284 446.000 431.000 446.000  c
422.716 446.000 416.000 439.284 416.000 431.000  c
416.000 422.716 422.716 416.000 431.000 416.000  c
439.284 416.000 446.000 422.716 446.000 431.000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
429.743 428.842 m
429.743 429.857 l
429.431 429.680 429.123 429.550 428.821 429.467  c
428.519 429.383 428.212 429.342 427.899 429.342  c
427.191 429.342 426.644 429.563 426.259 430.006  c
425.873 430.449 425.681 431.071 425.681 431.873  c
425.681 432.675 425.873 433.298 426.259 433.740  c
426.644 434.183 427.191 434.404 427.899 434.404  c
428.212 434.404 428.519 434.363 428.821 434.279  c
429.123 434.196 429.431 434.071 429.743 433.904  c
429.743 434.904 l
429.441 435.040 429.129 435.144 428.806 435.217  c
428.483 435.290 428.139 435.326 427.774 435.326  c
426.785 435.326 425.998 435.016 425.415 434.396  c
424.832 433.777 424.540 432.936 424.540 431.873  c
424.540 430.811 424.834 429.972 425.423 429.357  c
426.011 428.743 426.821 428.436 427.853 428.436  c
428.175 428.436 428.496 428.469 428.813 428.537  c
429.131 428.605 429.441 428.706 429.743 428.842  c
h
431.966 434.154 m
433.903 434.154 l
433.903 427.482 l
431.794 427.904 l
431.794 426.826 l
433.888 426.404 l
435.075 426.404 l
435.075 434.154 l
437.013 434.154 l
437.013 435.154 l
431.966 435.154 l
431.966 434.154 l
h
f
2 J
10.0000 M
.200000 .400000 1.00000 RG
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
446.000 431.000 m
446.000 439.284 439.284 446.000 431.000 446.000  c
422.716 446.000 416.000 439.284 416.000 431.000  c
416.000 422.716 422.716 416.000 431.000 416.000  c
439.284 416.000 446.000 422.716 446.000 431.000  c
h
S
2 J
10.0000 M
0 J
1.45000 M
newpath
276.543 264.015 m
240.434 327.043 l
S
newpath
236.457 333.985 m
246.760 326.058 l
240.931 326.176 l
238.084 321.087 l
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
0 J
1.45000 M
newpath
289.035 265.130 m
301.368 299.735 l
311.717 326.543 l
S
newpath
314.598 334.006 m
314.941 321.011 l
311.357 325.610 l
305.612 324.612 l
h
f
2 J
10.0000 M
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
523.243 264.839 m
484.894 328.314 l
S
newpath
480.757 335.161 m
491.242 327.476 l
485.411 327.458 l
482.683 322.305 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
535.432 266.330 m
554.204 327.027 l
S
newpath
556.568 334.670 m
557.799 321.728 l
553.909 326.072 l
548.246 324.683 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
466.227 361.384 m
441.385 410.478 l
S
newpath
437.773 417.616 m
447.652 409.166 l
441.836 409.586 l
438.729 404.651 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
